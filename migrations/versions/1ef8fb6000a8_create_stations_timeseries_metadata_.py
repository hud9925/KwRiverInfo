"""create stations + timeseries_metadata + time_series_data

Revision ID: 1ef8fb6000a8
Revises: c433b5f3b84c
Create Date: 2025-04-29 23:53:57.607518

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1ef8fb6000a8'
down_revision = 'c433b5f3b84c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('time_series_data', schema=None) as batch_op:
        batch_op.drop_index('ix_time_series_data_id')
        batch_op.drop_index('ix_time_series_data_station_id')
        batch_op.drop_index('ix_time_series_data_timestamp')
        batch_op.drop_index('ix_time_series_data_ts_id')

    op.drop_table('time_series_data')
    op.drop_table('stations')
    with op.batch_alter_table('timeseries_data', schema=None) as batch_op:
        batch_op.drop_index('ix_timeseries_data_timestamp')

    op.drop_table('timeseries_data')
    with op.batch_alter_table('observations', schema=None) as batch_op:
        batch_op.drop_index('ix_observations_station_id')
        batch_op.drop_index('ix_observations_timestamp')
        batch_op.drop_index('ix_observations_ts_id')

    op.drop_table('observations')
    op.drop_table('timeseries_metadata')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('timeseries_metadata',
    sa.Column('ts_id', sa.INTEGER(), server_default=sa.text("nextval('timeseries_metadata_ts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('station_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ts_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ts_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ts_shortname', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('parametertype_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('parametertype_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['station_id'], ['stations.id'], name='timeseries_metadata_station_id_fkey'),
    sa.PrimaryKeyConstraint('ts_id', name='timeseries_metadata_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('observations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ts_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('station_id', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('parameter_type_name', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('parameter_fullname', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(length=12), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='observations_pkey')
    )
    with op.batch_alter_table('observations', schema=None) as batch_op:
        batch_op.create_index('ix_observations_ts_id', ['ts_id'], unique=False)
        batch_op.create_index('ix_observations_timestamp', ['timestamp'], unique=False)
        batch_op.create_index('ix_observations_station_id', ['station_id'], unique=False)

    op.create_table('timeseries_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('ts_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('station_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('parametertype_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('parameter_fullname', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['station_id'], ['stations.id'], name='timeseries_data_station_id_fkey'),
    sa.ForeignKeyConstraint(['ts_id'], ['timeseries_metadata.ts_id'], name='timeseries_data_ts_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='timeseries_data_pkey')
    )
    with op.batch_alter_table('timeseries_data', schema=None) as batch_op:
        batch_op.create_index('ix_timeseries_data_timestamp', ['timestamp'], unique=False)

    op.create_table('stations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('station_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='stations_pkey'),
    sa.UniqueConstraint('station_id', name='stations_station_id_key')
    )
    op.create_table('time_series_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('ts_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('parameter_type_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('unit', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parameter_fullname', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('station_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='time_series_data_pkey')
    )
    with op.batch_alter_table('time_series_data', schema=None) as batch_op:
        batch_op.create_index('ix_time_series_data_ts_id', ['ts_id'], unique=False)
        batch_op.create_index('ix_time_series_data_timestamp', ['timestamp'], unique=False)
        batch_op.create_index('ix_time_series_data_station_id', ['station_id'], unique=False)
        batch_op.create_index('ix_time_series_data_id', ['id'], unique=False)

    # ### end Alembic commands ###
